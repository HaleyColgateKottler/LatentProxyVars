file.path(
"Data", "Samples",
paste("Y_", tag, "_", n, ".csv", sep = "")
),
header = FALSE
)
df <- Z
df$A <- A$V1
df$Y <- Y$V1
return(df)
}
bar.plots <- function(tag, plot.title, true.val, sample.size, trials){
temp.df <- read.csv(
file.path(
"Data", "Estimates",
paste("ests_", tag, as.character(sample.size),
".csv",
sep = ""
)
),
colClasses = "numeric"
)
colnames(temp.df) <- c("Latent", "Linear", "IPW", "IV", "Proximal")
temp = melt(temp.df)
colnames(temp) <- c('Method', 'estimate')
ggplot(temp) + geom_boxplot(aes(y = estimate, x = Method)) +
geom_hline(yintercept = true.val, color = 'green',
linewidth = 2) + ylab("ATE Estimate") +
ggtitle(plot.title)
ggsave(file.path("Data", "Figures", paste(tag, "_", sample.size, "_", trials, ".png",
sep = ""
)))
temp.df2 <- temp.df[,c('Latent', 'Linear', 'IPW', 'Proximal')]
temp = melt(temp.df2)
colnames(temp) <- c('Method', 'estimate')
ggplot(temp) + geom_boxplot(aes(y = estimate, x = Method)) +
geom_hline(yintercept = true.val, color = 'green',
linewidth = 2) + ylab("ATE Estimate") +
ggtitle(plot.title)
ggsave(file.path("Data", "Figures", paste(tag, "_", sample.size, "_", trials, "_noIV.png",
sep = ""
)))
}
trials <- 100
sample.size <- 1000
set.seed(127)
tag = "IV"
k = 2
p = 9
iv_test(1:9, p, sample.size, trials, tag)
load(file.path("Data", "Parameters",
paste("param_", tag, ".RData", sep = "")))
true_ate <- gamma[1]
bar.plots(tag, "True Model: Instrument Variable", true_ate, sample.size, trials)
load(file.path("Data", "Parameters",
paste("param_", tag, sample.size, ".RData", sep = "")))
load(file.path("Data", "Parameters",
paste("param_", tag, ".RData", sep = "")))
tag = "IV"
load(file.path("Data", "Parameters",
paste("param_", tag, ".RData", sep = "")))
tag = "skew"
load(file.path("Data", "Parameters",
paste("param_", tag, ".RData", sep = "")))
load(file.path("Data", "Parameters",
paste("param_", tag, sample.size, ".RData", sep = "")))
set.seed(127)
tag = "skew"
k = 4
p = 12
skew_test(1:p, p, sample.size, trials, tag)
H <- rsn(sample.size, xi, omega, slant.alpha)
alpha <- alpha[1:2]
gamma <- gamma[1:2]
p = 5
skew_param_gen(1, p, alpha, gamma, 5, "skew")
set.seed(127)
tag = "skew"
k = 1
p = 5
skew_test(1:p, p, sample.size, trials, tag)
load(file.path("Data", "Parameters",
paste("param_", tag, sample.size, ".RData", sep = "")))
true_ate <- gamma[1]
bar.plots(tag, "True Model: Skew Normal", true_ate, sample.size, trials)
skew_az_gen(tag, sample.size)
raw.data <- data.import(tag, sample.size)
proximal.ate <- proximal_causal(raw.data, paste("V", 1:floor(p/2), sep = ""),
paste("V", (floor(p/2)+1):p, sep = ""))
df = raw.data
nco.names <- paste("V", 1:floor(p/2), sep = "")
nce.names <- paste("V", (floor(p/2)+1):p, sep = ""))
nce.names <- paste("V", (floor(p/2)+1):p, sep = "")
wformulas <- paste(nco.names,
" ~ A + ", paste0(nce.names, sep = "", collapse = " + "),
" + ", paste0("A * ", nce.names, sep = "", collapse = " + "),
sep = "")
m.hW <- lapply(wformulas, lm, data = df)
View(m.hW)
wav <- sapply(m.hW, predict, data = df[,c("A", "Y", nce.names)])
prior.names <- colnames(df)
df <- cbind(df, wav)
colnames(df) <- c(prior.names, paste("wav", 1:length(nco.names), sep = ""))
View(df)
# estimate tau_a
m1formula <- paste("Y ~ A + ",
paste0("wav", 1:length(nco.names), collapse = " + "),
" + ",
paste0("A * ", paste("wav", 1:length(nco.names), sep = ""),
collapse = " + "),
sep = "")
m1 <- lm(m1formula, df)
alpha <- m1$coefficients[c("(Intercept)", paste("wav", 1:length(nco.names), sep = ""))]
gamma <- m1$coefficients[c("A", paste("A:wav", 1:length(nco.names), sep = ""))]
# calc CATE
mWVformula <- paste(paste0(nco.names, collapse = " + "),
" ~ ", paste0(nce.names, collapse = " + "))
m.WV <- lm(mWVformula, df)
View(m.WV)
WV <- predict(m.WV, df)
CATE <- gamma[1] + gamma[2:4] %*% t(WV)
sum(is.na(CATE))
CATE
tag <- 'binary'
load(file.path("Data", "Parameters",
paste("param_", tag, ".RData", sep = "")))
set.seed(127)
tag <- 'binary'
k = 3
p = 10
binary_test(1:p, p, sample.size, trials, tag)
load(file.path("Data", "Parameters",
paste("param_", tag, ".RData", sep = "")))
true_ate <- gamma[1]
bar.plots(tag, "True Model: Probit A", true_ate, sample.size, trials)
bar.plots <- function(tag, plot.title, true.val, sample.size, trials){
temp.df <- read.csv(
file.path(
"Data", "Estimates",
paste("ests_", tag, as.character(sample.size),
".csv",
sep = ""
)
),
colClasses = "numeric"
)
colnames(temp.df) <- c("Latent", "Linear", "IPW", "IV", "Proximal")
temp = melt(temp.df)
colnames(temp) <- c('Method', 'estimate')
ggplot(temp) + geom_boxplot(aes(y = estimate, x = Method)) +
geom_hline(yintercept = true.val, color = 'green',
linewidth = 2) + ylab("ATE Estimate") +
ggtitle(plot.title)
ggsave(file.path("Data", "Figures", paste(tag, "_", sample.size, "_", trials, ".png",
sep = ""
)))
temp.df2 <- temp.df[,c('Latent', 'Linear', 'IPW')]
temp = melt(temp.df2)
colnames(temp) <- c('Method', 'estimate')
ggplot(temp) + geom_boxplot(aes(y = estimate, x = Method)) +
geom_hline(yintercept = true.val, color = 'green',
linewidth = 2) + ylab("ATE Estimate") +
ggtitle(plot.title)
ggsave(file.path("Data", "Figures", paste(tag, "_", sample.size, "_", trials, "_noIV.png",
sep = ""
)))
}
bar.plots(tag, "True Model: Probit A", true_ate, sample.size, trials)
library(boot)
source("datagen.R")
source("latentMethod.R")
saveParams(2, 6, 3, .1, 0, rep(0,6), diag(2),
c(.7, .5, .8), c(-.5, .7, .2), 'boot')
azGen('boot', 1000)
raw.data <- data.import('boot', 1000)
boot.out <- boot(raw.data, function(df){latent.ATE(df, 1:6, 6)}, 20)
latent.func <- function(df){
latent.ATE(df, 1:6, 6)
}
boot.out <- boot(raw.data, latent.func, 20)
boot.out <- boot(data = raw.data, statistic = latent.ATE, R = 20,
kvals = 1:6, p = 6)
latent.func <- function(df, indices){
latent.ATE(df[indices,], 1:6, 6)
}
boot.out <- boot(data = raw.data, statistic = latent.func, R = 20,
kvals = 1:6, p = 6)
boot.out <- boot(data = raw.data, statistic = latent.func, R = 20)
boot.ci(boot.out)
latent.func <- function(data.df, indices){
df <- data.df[indices,]
latent.ATE(df, 1:6, 6)
}
boot.out <- boot(data = raw.data, statistic = latent.func, R = 20)
latent.func(raw.data, 1:1000)
latent.func <- function(data.df, indices){
df <- data.df[indices,]
latent.ATE(df, 1:6, 6)$estimate
}
boot.out <- boot(data = raw.data, statistic = latent.func, R = 20)
boot.ci(boot.out)
boot.out <- boot(data = raw.data, statistic = latent.func, R = 100)
boot.ci(boot.out)
boot.out
cis <- boot.ci(boot.out)
plot(boot.out)
cis <- boot.ci(boot.out, type = "norm")
cis
saveParams(2, 6, 3, .1, 0, rep(0,6), diag(2),
c(.7, -.5, -.8), c(.5, .7, .2), 'boot')
azGen('boot', 1000)
raw.data <- data.import('boot', 1000)
latent.func <- function(data.df, indices){
df <- data.df[indices,]
latent.ATE(df, 1:6, 6)$estimate
}
library(boot)
source("datagen.R")
source("latentMethod.R")
azGen('boot', 1000)
raw.data <- data.import('boot', 1000)
data.import <- function(tag, n) {
A <- read.csv(
file.path(
"Data", "Samples",
paste("A_", tag, "_", n, ".csv", sep = "")
),
header = FALSE
)
Z <- read.csv(
file.path(
"Data", "Samples",
paste("Z_", tag, "_", n, ".csv", sep = "")
),
header = FALSE
)
Y <- read.csv(
file.path(
"Data", "Samples",
paste("Y_", tag, "_", n, ".csv", sep = "")
),
header = FALSE
)
df <- Z
df$A <- A$V1
df$Y <- Y$V1
return(df)
}
raw.data <- data.import('boot', 1000)
latent.func <- function(data.df, indices){
df <- data.df[indices,]
latent.ATE(df, 1:6, 6)$estimate
}
boot.out <- boot(data = raw.data, statistic = latent.func, R = 1000)
plot(boot.out)
cis <- boot.ci(boot.out, type = "norm")
cis <- boot.ci(boot.out)
cis <- boot.ci(boot.out, type = "norm")
cis
cis <- boot.ci(boot.out, type = "percent")
plot(boot.out)
cis
View(cis)
cis <- boot.ci(boot.out, type = "stud")
cis <- boot.ci(boot.out)
cis <- boot.ci(boot.out, L =empinf(boot.out, index=1L, type="jack"))
# saveParams(2, 6, 3, .1, 0, rep(0,6), diag(2),
#            c(.7, -.5, -.8), c(.5, .7, .2), 'boot')
azGen('boot', 500)
# saveParams(2, 6, 3, .1, 0, rep(0,6), diag(2),
#            c(.7, -.5, -.8), c(.5, .7, .2), 'boot')
# azGen('boot', 500)
raw.data <- data.import('boot', 500)
latent.func <- function(data.df, indices){
df <- data.df[indices,]
latent.ATE(df, 1:6, 6)$estimate
}
boot.out <- boot(data = raw.data, statistic = latent.func, R = 1000)
library(boot)
source("datagen.R")
source("latentMethod.R")
data.import <- function(tag, n) {
A <- read.csv(
file.path(
"Data", "Samples",
paste("A_", tag, "_", n, ".csv", sep = "")
),
header = FALSE
)
Z <- read.csv(
file.path(
"Data", "Samples",
paste("Z_", tag, "_", n, ".csv", sep = "")
),
header = FALSE
)
Y <- read.csv(
file.path(
"Data", "Samples",
paste("Y_", tag, "_", n, ".csv", sep = "")
),
header = FALSE
)
df <- Z
df$A <- A$V1
df$Y <- Y$V1
return(df)
}
# saveParams(2, 6, 3, .1, 0, rep(0,6), diag(2),
#            c(.7, -.5, -.8), c(.5, .7, .2), 'boot')
# azGen('boot', 500)
raw.data <- data.import('boot', 500)
latent.func <- function(data.df, indices){
df <- data.df[indices,]
latent.ATE(df, 1:6, 6)$estimate
}
boot.out <- boot(data = raw.data, statistic = latent.func, R = 500)
plot(boot.out)
cis <- boot.ci(boot.out)
cis <- boot.ci(boot.out, L =empinf(boot.out, index=1L, type="jack"))
View(cis)
cis <- boot.ci(boot.out, type = "basic")
cis
cis <- boot.ci(boot.out, type = "perc")
cis
cis$percent
x <- cis$percent
x
ci
cis
summary(cis)
x
x <- cis$percent[4:5]
View(raw.data)
cis <- boot.ci(boot.out, type = "norm")
cis
x <- cis$percent[2:3]
x <- cis$norm[2:3]
x <- cis$normal[2:3]
library(boot)
source("datagen.R")
source("latentMethod.R")
data.import <- function(tag, n) {
A <- read.csv(
file.path(
"Data", "Samples",
paste("A_", tag, "_", n, ".csv", sep = "")
),
header = FALSE
)
Z <- read.csv(
file.path(
"Data", "Samples",
paste("Z_", tag, "_", n, ".csv", sep = "")
),
header = FALSE
)
Y <- read.csv(
file.path(
"Data", "Samples",
paste("Y_", tag, "_", n, ".csv", sep = "")
),
header = FALSE
)
df <- Z
df$A <- A$V1
df$Y <- Y$V1
return(df)
}
latent.func <- function(data.df, indices){
df <- data.df[indices,]
latent.ATE(df, 1:6, 6)$estimate
}
covered <- 0
for (i in 1:100){
azGen('boot', 500)
raw.data <- data.import('boot', 500)
boot.out <- boot(data = raw.data, statistic = latent.func, R = 1000)
cis <- boot.ci(boot.out, type = "norm")$normal[2:3]
if (cis[1] < .5 && cis[2] > .5){
covered <- covered + 1
}
}
latent.func <- function(data.df, indices){
df <- data.df[indices,]
latent.ATE(df, 1:6, 6)$estimate
}
covered <- 0
for (i in 1:10){
azGen('boot', 500)
raw.data <- data.import('boot', 500)
boot.out <- boot(data = raw.data, statistic = latent.func, R = 500)
cis <- boot.ci(boot.out, type = "norm")$normal[2:3]
if (cis[1] < .5 && cis[2] > .5){
covered <- covered + 1
}
}
latent.func <- function(data.df, indices){
df <- data.df[indices,]
latent.ATE(df, 1:6, 6)$estimate
}
covered <- 0
for (i in 1:10){
azGen('boot', 500)
raw.data <- data.import('boot', 500)
boot.out <- boot(data = raw.data, statistic = latent.func, R = 500)
cis <- boot.ci(boot.out, type = "norm")$normal[2:3]
if (cis[1] < .5 && cis[2] > .5){
covered <- covered + 1
}
print(covered)
}
for (i in 1:40){
azGen('boot', 500)
raw.data <- data.import('boot', 500)
boot.out <- boot(data = raw.data, statistic = latent.func, R = 500)
cis <- boot.ci(boot.out, type = "norm")$normal[2:3]
if (cis[1] < .5 && cis[2] > .5){
covered <- covered + 1
}
print(covered)
}
cis <- boot.ci(boot.out, type = c("norm", "perc", "basic"))
df <- ifelse(file.exists(save.name),
read.csv(save.name),
data.frame(matrix(0, nrow = 0, ncol = 6)))
save.name <- 'coverage.csv'
df <- ifelse(file.exists(save.name),
read.csv(save.name),
data.frame(matrix(0, nrow = 0, ncol = 6)))
cis
save.name <- 'coverage.csv'
df <- ifelse(file.exists(save.name),
read.csv(save.name),
data.frame(matrix(0, nrow = 0, ncol = 6)))
colnames(df) <- c('norm_low', 'norm_high',
'perc_low', 'perc_high',
'base_low', 'base_high')
View(df)
if (file.exists(save.name)){
df <- data.frame(matrix(0, nrow = 0, ncol = 6))
} else {
df <- read.csv(save.name)
}
if (file.exists(save.name)){
df <- data.frame(matrix(0, nrow = 0, ncol = 6))
} else {
df <- read.csv(save.name)
}
save.name <- 'coverage.csv'
if (file.exists(save.name)){
df <- data.frame(matrix(0, nrow = 0, ncol = 6))
} else {
df <- read.csv(save.name)
}
df <- data.frame(matrix(0, nrow = 0, ncol = 6))
file.exists(save.name)
if (file.exists(save.name)){
df <- read.csv(save.name)
} else {
df <- data.frame(matrix(0, nrow = 0, ncol = 6))
}
colnames(df) <- c('norm_low', 'norm_high',
'perc_low', 'perc_high',
'base_low', 'base_high')
for (i in 1:1){
azGen('boot', 500)
raw.data <- data.import('boot', 500)
boot.out <- boot(data = raw.data, statistic = latent.func, R = 500)
cis <- boot.ci(boot.out, type = c("norm", "perc", "basic"))
df[nrow(df) + 1, ] <- c(cis$normal[2:3], cis$percent[4:5], cis$basic[4:5])
}
if (file.exists(save.name)){
df <- read.csv(save.name)
} else {
df <- data.frame(matrix(0, nrow = 0, ncol = 7))
}
colnames(df) <- c('est', 'norm_low', 'norm_high',
'perc_low', 'perc_high',
'base_low', 'base_high')
for (i in 1:1){
azGen('boot', 500)
raw.data <- data.import('boot', 500)
boot.out <- boot(data = raw.data, statistic = latent.func, R = 500)
cis <- boot.ci(boot.out, type = c("norm", "perc", "basic"))
df[nrow(df) + 1, ] <- c(boot.out$t0[index[1]], cis$normal[2:3], cis$percent[4:5], cis$basic[4:5])
}
df[nrow(df) + 1, ] <- c(boot.out$t0[[1]], cis$normal[2:3], cis$percent[4:5], cis$basic[4:5])
View(df)
write.csv(df, row.names = FALSE)
save.name <- 'coverage.csv'
if (file.exists(save.name)){
df <- read.csv(save.name)
} else {
df <- data.frame(matrix(0, nrow = 0, ncol = 7))
}
save.name <- 'coverage.csv'
if (file.exists(save.name)){
df <- read.csv(save.name)
} else {
df <- data.frame(matrix(0, nrow = 0, ncol = 7))
}
colnames(df) <- c('est', 'norm_low', 'norm_high',
'perc_low', 'perc_high',
'base_low', 'base_high')
for (i in 1:10){
azGen('boot', 500)
raw.data <- data.import('boot', 500)
boot.out <- boot(data = raw.data, statistic = latent.func, R = 500)
cis <- boot.ci(boot.out, type = c("norm", "perc", "basic"))
df[nrow(df) + 1, ] <- c(boot.out$t0[[1]], cis$normal[2:3], cis$percent[4:5], cis$basic[4:5])
}
