source(file.path("tests", "IV.R"))
source(file.path("tests", "skew.R"))
source(file.path("tests", "binary.R"))
source(file.path("tests", "noLatent.R"))
source(file.path("tests", "higherY.R"))
source(file.path("tests", "UZUAUY.R"))
data.import <- function(tag, n) {
A <- read.csv(
file.path(
"Data", "Samples",
paste("A_", tag, "_", n, ".csv", sep = "")
),
header = FALSE
)
Z <- read.csv(
file.path(
"Data", "Samples",
paste("Z_", tag, "_", n, ".csv", sep = "")
),
header = FALSE
)
Y <- read.csv(
file.path(
"Data", "Samples",
paste("Y_", tag, "_", n, ".csv", sep = "")
),
header = FALSE
)
df <- Z
df$A <- A$V1
df$Y <- Y$V1
return(df)
}
bar.plots <- function(tag, plot.title, true.val, sample.size, trials){
temp.df <- read.csv(
file.path(
"Data", "Estimates",
paste("ests_", tag, as.character(sample.size),
".csv",
sep = ""
)
),
colClasses = "numeric"
)
colnames(temp.df) <- c("Latent", "Linear", "IPW", "IV")
temp = melt(temp.df)
colnames(temp) <- c('Method', 'estimate')
ggplot(temp) + geom_boxplot(aes(y = estimate, x = Method)) +
geom_hline(yintercept = true.val, color = 'green',
linewidth = 2) + ylab("ATE Estimate") +
ggtitle(plot.title)
ggsave(file.path("Data", "Figures", paste(tag, "_", sample.size, "_", trials, ".png",
sep = ""
)))
}
trials <- 100
sample.size <- 500
set.seed(127)
tag <- "consistency"
k = 2
p = 9
sample.sizes <- seq(from = 100, to = 1000, by = 100)
test.consistency(tag, sample.sizes, 1:3, reps = trials)
graph.consistency(tag, seq(from = 200, to = 1000, by = 200))
library(lavaan)
library(cubature)
library(mvtnorm)
library(dplyr)
library(reshape2)
library(ggplot2)
source("datagen.R")
source("computeTrue.R")
source("comparisonMethods.R")
source("latentMethod.R")
source("se.R")
source(file.path("tests", "consistency.R"))
source(file.path("tests", "IV.R"))
source(file.path("tests", "skew.R"))
source(file.path("tests", "binary.R"))
source(file.path("tests", "noLatent.R"))
source(file.path("tests", "higherY.R"))
source(file.path("tests", "UZUAUY.R"))
data.import <- function(tag, n) {
A <- read.csv(
file.path(
"Data", "Samples",
paste("A_", tag, "_", n, ".csv", sep = "")
),
header = FALSE
)
Z <- read.csv(
file.path(
"Data", "Samples",
paste("Z_", tag, "_", n, ".csv", sep = "")
),
header = FALSE
)
Y <- read.csv(
file.path(
"Data", "Samples",
paste("Y_", tag, "_", n, ".csv", sep = "")
),
header = FALSE
)
df <- Z
df$A <- A$V1
df$Y <- Y$V1
return(df)
}
bar.plots <- function(tag, plot.title, true.val, sample.size, trials){
temp.df <- read.csv(
file.path(
"Data", "Estimates",
paste("ests_", tag, as.character(sample.size),
".csv",
sep = ""
)
),
colClasses = "numeric"
)
colnames(temp.df) <- c("Latent", "Linear", "IPW", "IV")
temp = melt(temp.df)
colnames(temp) <- c('Method', 'estimate')
ggplot(temp) + geom_boxplot(aes(y = estimate, x = Method)) +
geom_hline(yintercept = true.val, color = 'green',
linewidth = 2) + ylab("ATE Estimate") +
ggtitle(plot.title)
ggsave(file.path("Data", "Figures", paste(tag, "_", sample.size, "_", trials, ".png",
sep = ""
)))
}
trials <- 100
sample.size <- 500
set.seed(127)
tag = ""
p=9
uzuauy_test(1:5, sample.size, trials, tag)
load(file.path("Data", "Parameters",
paste("param_zhigh_ahigh_y40", ".RData", sep = "")))
true_ate <- gamma[1]
graph.uzuauy(tag, sample.size)
library(lavaan)
library(cubature)
library(mvtnorm)
library(dplyr)
library(reshape2)
library(ggplot2)
source("datagen.R")
source("computeTrue.R")
source("comparisonMethods.R")
source("latentMethod.R")
source("se.R")
source(file.path("tests", "consistency.R"))
source(file.path("tests", "IV.R"))
source(file.path("tests", "skew.R"))
source(file.path("tests", "binary.R"))
source(file.path("tests", "noLatent.R"))
source(file.path("tests", "higherY.R"))
source(file.path("tests", "UZUAUY.R"))
data.import <- function(tag, n) {
A <- read.csv(
file.path(
"Data", "Samples",
paste("A_", tag, "_", n, ".csv", sep = "")
),
header = FALSE
)
Z <- read.csv(
file.path(
"Data", "Samples",
paste("Z_", tag, "_", n, ".csv", sep = "")
),
header = FALSE
)
Y <- read.csv(
file.path(
"Data", "Samples",
paste("Y_", tag, "_", n, ".csv", sep = "")
),
header = FALSE
)
df <- Z
df$A <- A$V1
df$Y <- Y$V1
return(df)
}
bar.plots <- function(tag, plot.title, true.val, sample.size, trials){
temp.df <- read.csv(
file.path(
"Data", "Estimates",
paste("ests_", tag, as.character(sample.size),
".csv",
sep = ""
)
),
colClasses = "numeric"
)
colnames(temp.df) <- c("Latent", "Linear", "IPW", "IV")
temp = melt(temp.df)
colnames(temp) <- c('Method', 'estimate')
ggplot(temp) + geom_boxplot(aes(y = estimate, x = Method)) +
geom_hline(yintercept = true.val, color = 'green',
linewidth = 2) + ylab("ATE Estimate") +
ggtitle(plot.title)
ggsave(file.path("Data", "Figures", paste(tag, "_", sample.size, "_", trials, ".png",
sep = ""
)))
}
trials <- 100
sample.size <- 500
set.seed(127)
tag <- 'ratio'
k <- 2
pvals <- c(2, 4, 6, 8, 10, 12, 14, 16, 18, 20)
ratio_test(1:max(pvals), pvals, sample.size, trials, tag)
source(file.path("tests", "zuRatio.R"))
set.seed(127)
tag <- 'ratio'
k <- 2
pvals <- c(2, 4, 6, 8, 10, 12, 14, 16, 18, 20)
ratio_test(1:max(pvals), pvals, sample.size, trials, tag)
pvals <- c(2, 4, 6, 8, 10, 12, 14, 16)
load(file.path("Data", "Parameters",
paste("param_", tag, pvals[1], ".RData", sep = "")))
true_ate <- gamma[1]
graph.ratio(tag, pvals)
tag = ""
z.level = 20
a.level = 20
y.level = 20
z.level = 'low'
a.level = 'low'
temp.tag <- paste("z", z.level, "_a", a.level, "_y", y.level, sep = "")
tag = temp.tag
load(file.path("Data", "Parameters",
paste("param_", tag, ".RData", sep = "")))
tag = "skew"
library(lavaan)
library(cubature)
library(mvtnorm)
library(dplyr)
library(reshape2)
library(ggplot2)
source("datagen.R")
source("computeTrue.R")
source("comparisonMethods.R")
source("latentMethod.R")
source("se.R")
source(file.path("tests", "consistency.R"))
source(file.path("tests", "IV.R"))
source(file.path("tests", "skew.R"))
source(file.path("tests", "binary.R"))
source(file.path("tests", "noLatent.R"))
source(file.path("tests", "higherY.R"))
source(file.path("tests", "UZUAUY.R"))
source(file.path("tests", "zuRatio.R"))
data.import <- function(tag, n) {
A <- read.csv(
file.path(
"Data", "Samples",
paste("A_", tag, "_", n, ".csv", sep = "")
),
header = FALSE
)
Z <- read.csv(
file.path(
"Data", "Samples",
paste("Z_", tag, "_", n, ".csv", sep = "")
),
header = FALSE
)
Y <- read.csv(
file.path(
"Data", "Samples",
paste("Y_", tag, "_", n, ".csv", sep = "")
),
header = FALSE
)
df <- Z
df$A <- A$V1
df$Y <- Y$V1
return(df)
}
bar.plots <- function(tag, plot.title, true.val, sample.size, trials){
temp.df <- read.csv(
file.path(
"Data", "Estimates",
paste("ests_", tag, as.character(sample.size),
".csv",
sep = ""
)
),
colClasses = "numeric"
)
colnames(temp.df) <- c("Latent", "Linear", "IPW", "IV")
temp = melt(temp.df)
colnames(temp) <- c('Method', 'estimate')
ggplot(temp) + geom_boxplot(aes(y = estimate, x = Method)) +
geom_hline(yintercept = true.val, color = 'green',
linewidth = 2) + ylab("ATE Estimate") +
ggtitle(plot.title)
ggsave(file.path("Data", "Figures", paste(tag, "_", sample.size, "_", trials, ".png",
sep = ""
)))
}
raw.data <- data.import(tag, sample.size)
sample.size=500
raw.data <- data.import(tag, sample.size)
hist(raw.data$A)
hist(raw.data$V1)
hist(raw.data$V2)
hist(raw.data$V3)
hist(raw.data$V4)
hist(raw.data$V5)
hist(raw.data$V6)
hist(raw.data$V7)
hist(raw.data$Y)
library(lintr)
library(styler)
# Function to lint R scripts
lint_dir <- function(dir) {
files <- list.files(dir, pattern = "\\.R$", full.names = TRUE)
lapply(files, lintr::lint)
}
# Function to style R scripts
style_dir <- function(dir) {
files <- list.files(dir, pattern = "\\.R$", full.names = TRUE)
lapply(files, styler::style_file)
}
# Define the project directory (replace with your project's path)
project_dir <- getwd()
# Run lintr and styler on the project directory
lint_dir(project_dir)
library(lintr)
library(styler)
# Function to lint R scripts
lint_dir <- function(dir) {
files <- list.files(dir, pattern = "\\.R$", full.names = TRUE)
lapply(files, lintr::lint)
}
# Function to style R scripts
style_dir <- function(dir) {
files <- list.files(dir, pattern = "\\.R$", full.names = TRUE)
lapply(files, styler::style_file)
}
# Define the project directory (replace with your project's path)
project_dir <- getwd()
# Run lintr and styler on the project directory
lint_dir(project_dir)
# Function to lint R scripts
lint_dir <- function(dir) {
files <- list.files(dir, pattern = "\\.R$", full.names = TRUE)
lapply(files, lintr::lint)
}
# Function to style R scripts
style_dir <- function(dir) {
files <- list.files(dir, pattern = "\\.R$", full.names = TRUE)
lapply(files, styler::style_file)
}
# Define the project directory (replace with your project's path)
project_dir <- getwd()
# Run lintr and styler on the project directory
lint_dir(project_dir)
files <- list.files(dir, pattern = "\\.R$", full.names = TRUE)
# Function to lint R scripts
lint_dir <- function(dir) {
files <- list.files(dir, pattern = "\\.R$", full.names = TRUE)
lapply(files, lintr::lint)
}
# Function to style R scripts
style_dir <- function(dir) {
files <- list.files(dir, pattern = "\\.R$", full.names = TRUE)
lapply(files, styler::style_file)
}
# Define the project directory (replace with your project's path)
project_dir <- getwd()
# Run lintr and styler on the project directory
lint_dir(project_dir)
lint('comparisonMethods.R')
style_dir(project_dir)
lint('comparisonMethods.R')
lint('comparisonMethods.R')
lint('computeTrue.R')
lint('datagen.R')
lint('datagen.R')
lint('datagen.R')
lint('datagen.R')
# Function to lint R scripts
lint_dir <- function(dir) {
files <- list.files(dir, pattern = "\\.R$", full.names = TRUE)
lapply(files, lintr::lint)
}
# Function to style R scripts
style_dir <- function(dir) {
files <- list.files(dir, pattern = "\\.R$", full.names = TRUE)
lapply(files, styler::style_file)
}
# Define the project directory (replace with your project's path)
project_dir <- getwd()
style_dir(project_dir)
library(lavaan)
library(cubature)
library(mvtnorm)
library(dplyr)
library(reshape2)
library(ggplot2)
source("datagen.R")
source("computeTrue.R")
source("comparisonMethods.R")
source("latentMethod.R")
source("se.R")
source(file.path("tests", "consistency.R"))
source(file.path("tests", "IV.R"))
source(file.path("tests", "skew.R"))
source(file.path("tests", "binary.R"))
source(file.path("tests", "noLatent.R"))
source(file.path("tests", "higherY.R"))
source(file.path("tests", "UZUAUY.R"))
source(file.path("tests", "zuRatio.R"))
data.import <- function(tag, n) {
A <- read.csv(
file.path(
"Data", "Samples",
paste("A_", tag, "_", n, ".csv", sep = "")
),
header = FALSE
)
Z <- read.csv(
file.path(
"Data", "Samples",
paste("Z_", tag, "_", n, ".csv", sep = "")
),
header = FALSE
)
Y <- read.csv(
file.path(
"Data", "Samples",
paste("Y_", tag, "_", n, ".csv", sep = "")
),
header = FALSE
)
df <- Z
df$A <- A$V1
df$Y <- Y$V1
return(df)
}
bar.plots <- function(tag, plot.title, true.val, sample.size, trials){
temp.df <- read.csv(
file.path(
"Data", "Estimates",
paste("ests_", tag, as.character(sample.size),
".csv",
sep = ""
)
),
colClasses = "numeric"
)
colnames(temp.df) <- c("Latent", "Linear", "IPW", "IV")
temp = melt(temp.df)
colnames(temp) <- c('Method', 'estimate')
ggplot(temp) + geom_boxplot(aes(y = estimate, x = Method)) +
geom_hline(yintercept = true.val, color = 'green',
linewidth = 2) + ylab("ATE Estimate") +
ggtitle(plot.title)
ggsave(file.path("Data", "Figures", paste(tag, "_", sample.size, "_", trials, ".png",
sep = ""
)))
}
trials <- 10
sample.size <- 500
trials <- 10
sample.size <- 100
set.seed(127)
tag <- "consistency"
k = 2
p = 9
sample.sizes <- seq(from = 100, to = 1000, by = 100)
test.consistency(tag, sample.sizes, 1:3, reps = trials)
lint('comparisonMethods.R')
library(lintr)
library(styler)
# Function to lint R scripts
lint_dir <- function(dir) {
files <- list.files(dir, pattern = "\\.R$", full.names = TRUE)
lapply(files, lintr::lint)
}
# Function to style R scripts
style_dir <- function(dir) {
files <- list.files(dir, pattern = "\\.R$", full.names = TRUE)
lapply(files, styler::style_file)
}
# Define the project directory (replace with your project's path)
project_dir <- getwd()
lint("main.R")
lint("main.R")
lint("main.R")
lint("main.R")
lint('comparisonMethods.R')
lint('datagen.R')
lint('newSEM.R')
lint('newSEM.R')
lint('tests/binary.R')
style_dir('tests')
lint('tests/binary.R')
lint('tests/binary.R')
lint('tests/binary.R')
lint('tests/consistency.R')
lint('tests/consistency.R')
lint('tests/consistency.R')
lint('tests/consistency.R')
lint('tests/higherY.R')
lint('tests/higherY.R')
