trialF = function(h,z){
h^{-2}*z
}
library(cubature)
cubintegrate(trialF, rep(-Inf,1), rep(Inf,1), fDim=1)$integral
trialF = function(v){
h = v[1]
z = v[2]
h^{-2}*z
}
library(cubature)
cubintegrate(trialF, rep(-Inf,2), rep(Inf,2), fDim=1)$integral
library(lavaan)
install.packages("lavaan")
library(lavaan)
library(cubature)
library(mvtnorm)
library(dplyr)
install.packages("lavaan")
install.packages(mvtnorm)
install.packages("mvtnorm")
library(lavaan)
library(cubature)
library(mvtnorm)
library(dplyr)
source("datagen.R")
source("computeTrue.R")
source("comparisonMethods.R")
source("latentMethod.R")
dataImport = function(tag){
A = read.csv(paste("A_", tag, ".csv", sep = ""), header = FALSE)
Z = read.csv(paste("Z_", tag, ".csv", sep = ""), header = FALSE)
Y = read.csv(paste("Y_", tag, ".csv", sep = ""), header = FALSE)
df = Z
df$A = A$V1
df$Y = Y$V1
return(df)
}
CATE.errors = function(df, params, betas, tag){
errors = c()
Z = subset(df, select = -c(A, Y))
for(i in 1:nrow(df)){
z = Z[i,]
cate = linearCATE(t(z), betas, params)
cate.true = trueCATE(tag, z)
errors[i] = cate-cate.true
}
return(errors)
}
latent.errors = c()
latent.est = c()
nieve = c()
IPW.est = c()
IPW.errors = c()
match = c()
linear = c()
for (i in 1:10){
print(i)
tag = "1Db"
azGen(tag)
k=1
p=3
rawData = dataImport(tag)
ATE.true = trueATE(tag)
nieve.ATE = nieveEst(rawData)
nieve[i] = abs(ATE.true - nieve.ATE)
linear.ATE = linearEst(rawData)
linear[i] = abs(ATE.true - linear.ATE)
IPW.ATE = IPWest(rawData)
IPW.errors[i] = abs(ATE.true - IPW.ATE)
IPW.est[i] = IPW.ATE
matching.ATE = matchingEst(rawData)
match[i] = abs(ATE.true - matching.ATE)
model = '
efa("efa1")*h1 + efa("efa1")*h2 =~ V1+V2+V3+V4+V5+V6
A ~ h1 + h2
A | 0*t1
A ~ 1
h1 ~ 0*1
h2 ~ 0*1
'
model <- '
efa("efa1")*h1 =~ V1+V2+V3
A ~ h1
A | 0*t1
A ~ 1
h1 ~ 0*1
'
params = fitUZA(model, rawData, k, p)
expected.df = fitExpectations(params, rawData, k, p, 1)
yModel = '
Y ~ .*.
'
betas = fitMeanModel(yModel, subset(expected.df, select = c(Y, A, expectations1)))
ATEest = ATE.est(expected.df, params, betas)
latent.est[i] = ATEest
latent.errors[i] = abs(ATEest-ATE.true)
}
hist(latent.errors-IPW.errors)
latent.errors = c()
latent.est = c()
nieve = c()
IPW.est = c()
IPW.errors = c()
match = c()
linear = c()
for (i in 1:1000){
print(i)
tag = "1Db"
azGen(tag)
k=1
p=3
rawData = dataImport(tag)
ATE.true = trueATE(tag)
nieve.ATE = nieveEst(rawData)
nieve[i] = abs(ATE.true - nieve.ATE)
linear.ATE = linearEst(rawData)
linear[i] = abs(ATE.true - linear.ATE)
IPW.ATE = IPWest(rawData)
IPW.errors[i] = abs(ATE.true - IPW.ATE)
IPW.est[i] = IPW.ATE
matching.ATE = matchingEst(rawData)
match[i] = abs(ATE.true - matching.ATE)
model = '
efa("efa1")*h1 + efa("efa1")*h2 =~ V1+V2+V3+V4+V5+V6
A ~ h1 + h2
A | 0*t1
A ~ 1
h1 ~ 0*1
h2 ~ 0*1
'
model <- '
efa("efa1")*h1 =~ V1+V2+V3
A ~ h1
A | 0*t1
A ~ 1
h1 ~ 0*1
'
params = fitUZA(model, rawData, k, p)
expected.df = fitExpectations(params, rawData, k, p, 1)
yModel = '
Y ~ .*.
'
betas = fitMeanModel(yModel, subset(expected.df, select = c(Y, A, expectations1)))
ATEest = ATE.est(expected.df, params, betas)
latent.est[i] = ATEest
latent.errors[i] = abs(ATEest-ATE.true)
}
errs.df = data.frame(latent.est, latent.errors, IPW.est, IPW.errors, linear, match, nieve)
write.table(errs.df, file = paste("errors.csv", sep = ""), sep = ",")
hist(latent.errors-IPW.errors)
hist(latent.est)
hist(IPW.est)
mean(latent.est)
mean(IPW.est)
mean(linear)
View(errs.df)
hist(latent.est)
hist(IPW.est)
hist(latent.est)
hist(IPW.est)
mean(linear)
mean(match)
mean(nieve)
mean(latent.errors)
mean(IPW.errors)
mean(linear)
mean(match)
mean(nieve)
latent.errors = c()
latent.est = c()
nieve = c()
IPW.est = c()
IPW.errors = c()
match = c()
linear = c()
for (i in 1:1){
print(i)
tag = "1Db"
azGen(tag)
k=1
p=3
rawData = dataImport(tag)
ATE.true = trueATE(tag)
nieve.ATE = nieveEst(rawData)
nieve[i] = abs(ATE.true - nieve.ATE)
linear.ATE = linearEst(rawData)
linear[i] = abs(ATE.true - linear.ATE)
IPW.ATE = IPWest(rawData)
IPW.errors[i] = abs(ATE.true - IPW.ATE)
IPW.est[i] = IPW.ATE
matching.ATE = matchingEst(rawData)
match[i] = abs(ATE.true - matching.ATE)
model = '
efa("efa1")*h1 + efa("efa1")*h2 =~ V1+V2+V3+V4+V5+V6
A ~ h1 + h2
A | 0*t1
A ~ 1
h1 ~ 0*1
h2 ~ 0*1
'
model <- '
efa("efa1")*h1 =~ V1+V2+V3
A ~ h1
A | 0*t1
A ~ 1
h1 ~ 0*1
'
params = fitUZA(model, rawData, k, p)
print(params)
expected.df = fitExpectations(params, rawData, k, p, 1)
yModel = '
Y ~ .*.
'
betas = fitMeanModel(yModel, subset(expected.df, select = c(Y, A, expectations1)))
ATEest = ATE.est(expected.df, params, betas)
latent.est[i] = ATEest
latent.errors[i] = abs(ATEest-ATE.true)
}
load("~/Documents/LatentProxyVars/param_1Db.RData")
View(psi)
View(sigma)
t(params$lambda.est)%*%solve(params$psi.est)%*%params$lambda.est + 1
t(lambda)%*%solve(psi)%*%lambda
t(params$lambda.est)%*%solve(params$psi.est)%*%params$nu.est
lambda%*%solve(psi)%*%Z_intercept
t(lambda)%*%solve(psi)%*%Z_intercept
t(params$lambda.est)%*%solve(params$psi.est)
t(lambda)%*%solve(psi)
