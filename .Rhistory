ordered = TRUE)
mean.ests$a.level <- factor(mean.ests$z.level, c('low UA', 'mid UA', 'high UA'),
ordered = TRUE)
mean.ests$y.level <- factor(mean.ests$z.level, c('low UY', 'mid UY', 'high UY'),
ordered = TRUE)
mean.ests <- data.frame(matrix(nrow = 0, ncol = 7))
j <- 0
for (z.level in c('low', 'mid', 'high')) {
for (a.level in c('low', 'mid', 'high')){
for (y.level in c(20, 40, 60)){
j <- j + 1
temp.tag <- paste("z", z.level, "_a", a.level, "_y", y.level, sep = "")
temp.df <- read.csv(
file.path(
"Data", "Estimates",
paste("ests_", temp.tag, as.character(sample.size),
".csv",
sep = ""
)),
colClasses = "numeric")
mean.ests[4 * j - 3, ] <- c(
z.level, a.level, y.level, "linear", mean(temp.df$linear),
quantile(temp.df$linear, probs = c(.05, .95))
)
mean.ests[4 * j - 2, ] <- c(
z.level, a.level, y.level, "IPW", mean(temp.df$ipw),
quantile(temp.df$ipw, probs = c(.05, .95))
)
mean.ests[4 * j - 1, ] <- c(
z.level, a.level, y.level, "latent", mean(temp.df$latent),
quantile(temp.df$latent, probs = c(.05, .95))
)
mean.ests[4 * j, ] <- c(
z.level, a.level, y.level, "IV", mean(temp.df$iv),
quantile(temp.df$iv, probs = c(.05, .95))
)
}
}}
colnames(mean.ests) <- c("z.level", "a.level", "y.level", "Type", "Mean", "Q.05", "Q.95")
mean.ests$Type <- factor(mean.ests$Type)
mean.ests$Mean <- as.numeric(mean.ests$Mean)
mean.ests$Q.05 <- as.numeric(mean.ests$Q.05)
mean.ests$Q.95 <- as.numeric(mean.ests$Q.95)
mean.ests$marker <- ifelse(mean.ests$z.level == 'low', '1',
ifelse(mean.ests$z.level == 'mid', '2', '3'))
mean.ests$marker <- ifelse(mean.ests$a.level == 'low',
paste(mean.ests$marker, '1', sep = ""),
ifelse(mean.ests$a.level == 'mid',
paste(mean.ests$marker, '2', sep = ""),
paste(mean.ests$marker, '3', sep = "")))
mean.ests$marker <- paste(mean.ests$marker, as.numeric(mean.ests$y.level)/20,
sep = "")
mean.ests$marker <- factor(mean.ests$marker)
mean.ests$z.level <- paste(mean.ests$z.level, 'UZ')
mean.ests$a.level <- paste(mean.ests$a.level, 'UA')
mean.ests$y.level <- ifelse(mean.ests$y.level == 20, 'low UY',
ifelse(mean.ests$y.level == 40,
'mid UY', 'high UY'))
mean.ests$z.level <- factor(mean.ests$z.level, c('low UZ', 'mid UZ', 'high UZ'),
ordered = TRUE)
unique(mean.ests$a.level)
mean.ests$a.level <- factor(mean.ests$a.level, c('low UA', 'mid UA', 'high UA'),
ordered = TRUE)
mean.ests$y.level <- factor(mean.ests$y.level, c('low UY', 'mid UY', 'high UY'),
ordered = TRUE)
load(file.path("Data", "Parameters",
paste("param_", temp.tag, ".RData", sep = "")))
true_ate <- gamma[1]
ggplot(mean.ests) + geom_boxplot(aes(x=y.level, y=Mean)) +
facet_wrap(z.level ~ a.level) +
geom_hline(yintercept = true_ate) +
ylab("Average ATE Estimate")
graph.uzuauy <- function(tag, sample.sizes){
mean.ests <- data.frame(matrix(nrow = 0, ncol = 7))
j <- 0
for (z.level in c('low', 'mid', 'high')) {
for (a.level in c('low', 'mid', 'high')){
for (y.level in c(20, 40, 60)){
j <- j + 1
temp.tag <- paste("z", z.level, "_a", a.level, "_y", y.level, sep = "")
temp.df <- read.csv(
file.path(
"Data", "Estimates",
paste("ests_", temp.tag, as.character(sample.size),
".csv",
sep = ""
)),
colClasses = "numeric")
mean.ests[4 * j - 3, ] <- c(
z.level, a.level, y.level, "linear", mean(temp.df$linear),
quantile(temp.df$linear, probs = c(.05, .95))
)
mean.ests[4 * j - 2, ] <- c(
z.level, a.level, y.level, "IPW", mean(temp.df$ipw),
quantile(temp.df$ipw, probs = c(.05, .95))
)
mean.ests[4 * j - 1, ] <- c(
z.level, a.level, y.level, "latent", mean(temp.df$latent),
quantile(temp.df$latent, probs = c(.05, .95))
)
mean.ests[4 * j, ] <- c(
z.level, a.level, y.level, "IV", mean(temp.df$iv),
quantile(temp.df$iv, probs = c(.05, .95))
)
}
}}
colnames(mean.ests) <- c("z.level", "a.level", "y.level", "Type", "Mean", "Q.05", "Q.95")
mean.ests$Type <- factor(mean.ests$Type)
mean.ests$Mean <- as.numeric(mean.ests$Mean)
mean.ests$Q.05 <- as.numeric(mean.ests$Q.05)
mean.ests$Q.95 <- as.numeric(mean.ests$Q.95)
mean.ests$marker <- ifelse(mean.ests$z.level == 'low', '1',
ifelse(mean.ests$z.level == 'mid', '2', '3'))
mean.ests$marker <- ifelse(mean.ests$a.level == 'low',
paste(mean.ests$marker, '1', sep = ""),
ifelse(mean.ests$a.level == 'mid',
paste(mean.ests$marker, '2', sep = ""),
paste(mean.ests$marker, '3', sep = "")))
mean.ests$marker <- paste(mean.ests$marker, as.numeric(mean.ests$y.level)/20,
sep = "")
mean.ests$marker <- factor(mean.ests$marker)
mean.ests$z.level <- paste(mean.ests$z.level, 'UZ')
mean.ests$a.level <- paste(mean.ests$a.level, 'UA')
mean.ests$y.level <- ifelse(mean.ests$y.level == 20, 'low UY',
ifelse(mean.ests$y.level == 40,
'mid UY', 'high UY'))
mean.ests$z.level <- factor(mean.ests$z.level, c('low UZ', 'mid UZ', 'high UZ'),
ordered = TRUE)
mean.ests$a.level <- factor(mean.ests$a.level, c('low UA', 'mid UA', 'high UA'),
ordered = TRUE)
mean.ests$y.level <- factor(mean.ests$y.level, c('low UY', 'mid UY', 'high UY'),
ordered = TRUE)
load(file.path("Data", "Parameters",
paste("param_", temp.tag, ".RData", sep = "")))
true_ate <- gamma[1]
ggplot(mean.ests) + geom_boxplot(aes(x=y.level, y=Mean)) +
facet_wrap(z.level ~ a.level) +
geom_hline(yintercept = true_ate) +
ylab("Average ATE Estimate")
ggsave(file.path("Data", "Figures", paste("UZUAUY_byY",
tag, ".png",
sep = ""
)))
ggplot(mean.ests) + geom_boxplot(aes(x=a.level, y=Mean)) +
facet_wrap(y.level ~ z.level) +
geom_hline(yintercept = true_ate) +
ylab("Average ATE Estimate")
ggsave(file.path("Data", "Figures", paste("UZUAUY_byA",
tag, ".png",
sep = ""
)))
ggplot(mean.ests) + geom_boxplot(aes(x=z.level, y=Mean)) +
facet_wrap(a.level ~ y.level) +
geom_hline(yintercept = true_ate) +
ylab("Average ATE Estimate")
ggsave(file.path("Data", "Figures", paste("UZUAUY_byZ",
tag, ".png",
sep = ""
)))
}
graph.uzuauy(tag, sample.size)
library(lavaan)
library(cubature)
library(mvtnorm)
library(dplyr)
library(reshape2)
library(ggplot2)
source("datagen.R")
source("computeTrue.R")
source("comparisonMethods.R")
source("latentMethod.R")
source("se.R")
source(file.path("tests", "consistency.R"))
source(file.path("tests", "IV.R"))
source(file.path("tests", "skew.R"))
source(file.path("tests", "binary.R"))
source(file.path("tests", "noLatent.R"))
source(file.path("tests", "higherY.R"))
source(file.path("tests", "UZUAUY.R"))
data.import <- function(tag, n) {
A <- read.csv(
file.path(
"Data", "Samples",
paste("A_", tag, "_", n, ".csv", sep = "")
),
header = FALSE
)
Z <- read.csv(
file.path(
"Data", "Samples",
paste("Z_", tag, "_", n, ".csv", sep = "")
),
header = FALSE
)
Y <- read.csv(
file.path(
"Data", "Samples",
paste("Y_", tag, "_", n, ".csv", sep = "")
),
header = FALSE
)
df <- Z
df$A <- A$V1
df$Y <- Y$V1
return(df)
}
bar.plots <- function(tag, plot.title, true.val, sample.size){
temp.df <- read.csv(
file.path(
"Data", "Estimates",
paste("ests_", tag, as.character(sample.size),
".csv",
sep = ""
)
),
colClasses = "numeric"
)
colnames(temp.df) <- c("Latent", "Linear", "IPW", "IV")
temp = melt(temp.df)
colnames(temp) <- c('Method', 'estimate')
ggplot(temp) + geom_boxplot(aes(y = estimate, x = Method)) +
geom_hline(yintercept = true.val, color = 'green',
linewidth = 2) + ylab("ATE Estimate") +
ggtitle(plot.title)
ggsave(file.path("Data", "Figures", paste(tag, ".png",
sep = ""
)))
}
trials <- 1000
sample.size <- 500
set.seed(127)
tag = "IV"
k = 2
p = 9
iv_test(1:9, sample.size, trials, tag)
tag = "IV"
k = 2
p = 9
iv_test(1:9, sample.size, trials, tag)
load(file.path("Data", "Parameters",
paste("param_", tag, ".RData", sep = "")))
true_ate <- gamma[1]
bar.plots(tag, "True Model: Instrument Variable", true_ate, sample.size)
trials <- 1000
sample.size <- 500
set.seed(127)
tag = "skew"
k = 2
p = 9
skew_test(1:9, sample.size, trials, tag)
library(lavaan)
library(cubature)
library(mvtnorm)
library(dplyr)
library(reshape2)
library(ggplot2)
source("datagen.R")
source("computeTrue.R")
source("comparisonMethods.R")
source("latentMethod.R")
source("se.R")
source(file.path("tests", "consistency.R"))
source(file.path("tests", "IV.R"))
source(file.path("tests", "skew.R"))
source(file.path("tests", "binary.R"))
source(file.path("tests", "noLatent.R"))
source(file.path("tests", "higherY.R"))
source(file.path("tests", "UZUAUY.R"))
data.import <- function(tag, n) {
A <- read.csv(
file.path(
"Data", "Samples",
paste("A_", tag, "_", n, ".csv", sep = "")
),
header = FALSE
)
Z <- read.csv(
file.path(
"Data", "Samples",
paste("Z_", tag, "_", n, ".csv", sep = "")
),
header = FALSE
)
Y <- read.csv(
file.path(
"Data", "Samples",
paste("Y_", tag, "_", n, ".csv", sep = "")
),
header = FALSE
)
df <- Z
df$A <- A$V1
df$Y <- Y$V1
return(df)
}
bar.plots <- function(tag, plot.title, true.val, sample.size){
temp.df <- read.csv(
file.path(
"Data", "Estimates",
paste("ests_", tag, as.character(sample.size),
".csv",
sep = ""
)
),
colClasses = "numeric"
)
colnames(temp.df) <- c("Latent", "Linear", "IPW", "IV")
temp = melt(temp.df)
colnames(temp) <- c('Method', 'estimate')
ggplot(temp) + geom_boxplot(aes(y = estimate, x = Method)) +
geom_hline(yintercept = true.val, color = 'green',
linewidth = 2) + ylab("ATE Estimate") +
ggtitle(plot.title)
ggsave(file.path("Data", "Figures", paste(tag, ".png",
sep = ""
)))
}
trials <- 1000
sample.size <- 500
set.seed(127)
tag = "skew"
k = 2
p = 9
skew_test(1:9, sample.size, trials, tag)
skew_az_gen <- function(tag, sample.size){
load(file.path("Data", "Parameters",
paste("param_", tag, sample.size, ".RData", sep = "")))
H <- rsn(sample.size, 0, 1, slant.alpha)
Z <- t(lambda[1:p,] %*% t(H)) + rmvnorm(sample.size, sigma = psi[1:p, 1:p])
colnames(Z) <- paste0("V", 1:p)
A <- t(lambda[p+1,] %*% t(H)) + rnorm(sample.size)
Y <- rowSums((alpha + A%*%gamma) * cbind(1, H)) + rnorm(sample.size, sd = var_Y)
write.table(H, file = file.path("Data", "Samples", paste("H_", tag, "_", sample.size, ".csv", sep = "")), row.names = FALSE, col.names = FALSE, sep = ",")
write.table(Z, file = file.path("Data", "Samples", paste("Z_", tag, "_", sample.size, ".csv", sep = "")), row.names = FALSE, col.names = FALSE, sep = ",")
write.table(A, file = file.path("Data", "Samples", paste("A_", tag, "_", sample.size, ".csv", sep = "")), row.names = FALSE, col.names = FALSE, sep = ",")
write.table(Y, file = file.path("Data", "Samples", paste("Y_", tag, "_", sample.size, ".csv", sep = "")), row.names = FALSE, col.names = FALSE, sep = ",")
}
tag = "skew"
k = 2
p = 9
skew_test(1:9, sample.size, trials, tag)
reps = trials
kvals = 1:9
est.df <- data.frame(matrix(nrow = 0, ncol = 4))
colnames(est.df) <- c("latent", "linear", "IPW", "IV")
latent <- c()
ipw <- c()
linear <- c()
iv <- c()
skew_az_gen(tag, sample.size)
raw.data <- data.import(tag, sample.size)
linear.ate <- linearEst(raw.data)
ipw.ate <- continuousIPWest(raw.data)
iv.ate <- IVest(raw.data)
ate.est <- latent.ATE(raw.data, kvals, p)
warnings()
AZ <- subset(raw.data, select = -c(Y))
Z <- subset(AZ, select = -c(A))
Z.dimension <- ncol(Z)
params <- fitUZA(raw.data, kvals, p)
smallerDF <- subset(df, select = -c(Y))
df = raw.data
smallerDF <- subset(df, select = -c(Y))
z.vars <- names(smallerDF)[grep("^V", names(smallerDF))]
fits <- c()
AICs <- c()
k.keeps <- c()
for (k in k.vals){
h.vars <- paste0("efa('efa1')*h", 1:k)
model <- paste(
paste(h.vars, collapse = " + "),
" =~ ",
paste(z.vars, collapse = " + "),
"+ A
",
paste0("h", 1:k, sep = "", collapse = "~ 0*1\n"),
"~0*1"
)
fit <- sem(model, data = smallerDF, rotation = "varimax")
if (inspect(fit, "converged")){
fits <- c(fits, fit)
AICs <- c(AICs, AIC(fit))
k.keeps <- c(k.keeps, k)
}
}
for (k in kvals){
h.vars <- paste0("efa('efa1')*h", 1:k)
model <- paste(
paste(h.vars, collapse = " + "),
" =~ ",
paste(z.vars, collapse = " + "),
"+ A
",
paste0("h", 1:k, sep = "", collapse = "~ 0*1\n"),
"~0*1"
)
fit <- sem(model, data = smallerDF, rotation = "varimax")
if (inspect(fit, "converged")){
fits <- c(fits, fit)
AICs <- c(AICs, AIC(fit))
k.keeps <- c(k.keeps, k)
}
}
k=2
h.vars <- paste0("efa('efa1')*h", 1:k)
model <- paste(
paste(h.vars, collapse = " + "),
" =~ ",
paste(z.vars, collapse = " + "),
"+ A
",
paste0("h", 1:k, sep = "", collapse = "~ 0*1\n"),
"~0*1"
)
fit <- sem(model, data = smallerDF, rotation = "varimax")
summary(fit)
if (inspect(fit, "converged")){
fits <- c(fits, fit)
AICs <- c(AICs, AIC(fit))
k.keeps <- c(k.keeps, k)
}
fit = fits[[which(AICs == min(AICs))]]
parameters <- list(
lambda.est = inspect(fit, what = "est")$lambda,
psi.est = inspect(fit, what = "est")$theta,
sigma.est = inspect(fit, what = "est")$psi,
nu.est = inspect(fit, what = "est")$nu,
k = k.keeps[which(AICs == min(AICs))]
)
params <- fitUZA(raw.data, kvals, p)
library(lavaan)
library(cubature)
library(mvtnorm)
library(dplyr)
library(reshape2)
library(ggplot2)
source("datagen.R")
source("computeTrue.R")
source("comparisonMethods.R")
source("latentMethod.R")
source("se.R")
source(file.path("tests", "consistency.R"))
source(file.path("tests", "IV.R"))
source(file.path("tests", "skew.R"))
source(file.path("tests", "binary.R"))
source(file.path("tests", "noLatent.R"))
source(file.path("tests", "higherY.R"))
source(file.path("tests", "UZUAUY.R"))
data.import <- function(tag, n) {
A <- read.csv(
file.path(
"Data", "Samples",
paste("A_", tag, "_", n, ".csv", sep = "")
),
header = FALSE
)
Z <- read.csv(
file.path(
"Data", "Samples",
paste("Z_", tag, "_", n, ".csv", sep = "")
),
header = FALSE
)
Y <- read.csv(
file.path(
"Data", "Samples",
paste("Y_", tag, "_", n, ".csv", sep = "")
),
header = FALSE
)
df <- Z
df$A <- A$V1
df$Y <- Y$V1
return(df)
}
bar.plots <- function(tag, plot.title, true.val, sample.size){
temp.df <- read.csv(
file.path(
"Data", "Estimates",
paste("ests_", tag, as.character(sample.size),
".csv",
sep = ""
)
),
colClasses = "numeric"
)
colnames(temp.df) <- c("Latent", "Linear", "IPW", "IV")
temp = melt(temp.df)
colnames(temp) <- c('Method', 'estimate')
ggplot(temp) + geom_boxplot(aes(y = estimate, x = Method)) +
geom_hline(yintercept = true.val, color = 'green',
linewidth = 2) + ylab("ATE Estimate") +
ggtitle(plot.title)
ggsave(file.path("Data", "Figures", paste(tag, ".png",
sep = ""
)))
}
trials <- 1000
sample.size <- 500
set.seed(127)
tag <- 'binary'
k = 2
p = 6
binary_test(1:p, sample.size, trials, tag)
tag <- 'binary'
k = 2
p = 6
binary_test(1:p, sample.size, trials, tag)
tag <- 'binary'
k = 2
p = 6
binary_test(1:p, sample.size, trials, tag)
